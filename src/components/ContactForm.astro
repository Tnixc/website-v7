---
import { ArrowRight, Loader, Check, X } from 'astro-feather-icons2';

const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const subpath = pathname.match(/[^/]+/g);
const href = '/';
const correctPage = href === pathname || href === `/${subpath?.[0] || ''}`;
---

<form id="contactForm" class="flex flex-col gap-4 max-w-md">
  <div class="flex flex-col gap-1">
    <label for="message" class="pl-1 text-text/70">Message *</label>
    <textarea
      id="message"
      required
      rows="4"
      autocomplete="off"
      class="bg-bg border border-text/10 rounded-sm p-2 focus:border-link/50 focus:outline-none transition-colors resize-none h-3em"
      placeholder="What would you like to say? An interesting article...a new tool to try...or simply :3"></textarea>
  </div>

  <div class="flex flex-col gap-1">
    <label for="contact" class="pl-1">
      Contact <span class="text-text/50 italic text-sm">optional</span>
    </label>
    <div class="flex w-full gap-1">
      <input
        id="contact"
        type="text"
        class="bg-bg border border-text/10 rounded-sm p-2 focus:border-link/50 focus:outline-none transition-colors w-full"
        placeholder="Email, Discord, or other contact info"
        autocomplete="off"
      />

      <p id="errorMessage" class="text-a2 text-sm hidden"></p>

      <button
        type="submit"
        id="submitButton"
        class="flex items-center group justify-center gap-2 bg-text/10 hover:bg-text/20 disabled:bg-text/5 disabled:cursor-not-allowed rounded-sm py-2 px-4 transition-colors w-fit">
        <span>Send</span>

        <ArrowRight
          size="16"
          id="idleIcon"
          class="text-text opacity-70 transition-transform duration-200 group-hover:translate-x-1"
        />

        <!-- Sending state icon (hidden by default) -->

        <Loader size="16" id="sendingIcon" class="hidden animate-spin" />

        <Check size="16" id="successIcon" class="hidden text-a4" />

        <X size="16" id="errorIcon" class="hidden text-a2" />
      </button>
    </div>
  </div>
</form>

<style>
  textarea:focus,
  input:focus {
    box-shadow: 0 0 0 1px var(--color-link);
  }
</style>

<script is:inline define:vars={{ correctPage }}>
  const fnContactForm = () => {
    const form = document.getElementById('contactForm');
    const messageInput = document.getElementById('message');
    const contactInput = document.getElementById('contact');
    const submitButton = document.getElementById('submitButton');
    const errorMessageElement = document.getElementById('errorMessage');

    // Icon elements
    const idleIcon = document.getElementById('idleIcon');
    const sendingIcon = document.getElementById('sendingIcon');
    const successIcon = document.getElementById('successIcon');
    const errorIcon = document.getElementById('errorIcon');

    let status = 'idle'; // idle, sending, success, error

    // Function to update UI based on form status
    function updateUI(newStatus, errorMsg = '') {
      status = newStatus;

      // Hide all icons first
      idleIcon?.classList.add('hidden');
      sendingIcon?.classList.add('hidden');
      successIcon?.classList.add('hidden');
      errorIcon?.classList.add('hidden');

      // Show appropriate icon based on status
      switch (status) {
        case 'idle':
          idleIcon?.classList.remove('hidden');
          if (submitButton) submitButton.disabled = false;
          break;
        case 'sending':
          sendingIcon?.classList.remove('hidden');
          if (submitButton) submitButton.disabled = true;
          break;
        case 'success':
          successIcon?.classList.remove('hidden');
          if (submitButton) submitButton.disabled = true;
          break;
        case 'error':
          errorIcon?.classList.remove('hidden');
          if (submitButton) submitButton.disabled = false;
          if (errorMessageElement) {
            errorMessageElement.textContent = errorMsg;
            errorMessageElement.classList.remove('hidden');
          }
          break;
      }
    }

    // Form submission handler
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const message = messageInput.value.trim();
      const contact = contactInput.value.trim();

      if (!message) {
        updateUI('error', 'Please enter a message');
        return;
      }

      updateUI('sending');

      try {
        const response = await fetch(
          `https://api.tnixc.space/api/message?content=${encodeURIComponent(
            message,
          )}&contact=${encodeURIComponent(contact)}`,
        );

        if (!response.ok) {
          throw new Error('Failed to send message');
        }

        updateUI('success');
        messageInput.value = '';
        contactInput.value = '';

        // Reset to idle after 3 seconds
        setTimeout(() => {
          updateUI('idle');
        }, 3000);
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Something went wrong';
        updateUI('error', errorMessage);

        // Reset to idle after 3 seconds
        setTimeout(() => {
          updateUI('idle');
        }, 3000);
      }
    });
  };
  if (correctPage) fnContactForm;
</script>
