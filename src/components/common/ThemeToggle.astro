---
import { Moon, Sun, Monitor } from 'astro-feather-icons2';
// Read the cookie server-side and default to "system" if not set
const themeCookie = Astro.cookies.get('theme');
const initialTheme = themeCookie?.value || 'system';
---

<button
  id="theme-toggle"
  title="Toggle theme"
  class="inline-grid place-items-center bg-text/10 text-text aspect-square size-8 smooth-md hover:bg-text/20 rounded-xl">
  <span id="icon-moon" style={`display: ${initialTheme === 'dark' ? 'inline-block' : 'none'}`}><Moon size="16" /></span>
  <span id="icon-sun" style={`display: ${initialTheme === 'light' ? 'inline-block' : 'none'}`}><Sun size="16" /></span>
  <span id="icon-system" style={`display: ${initialTheme === 'system' ? 'inline-block' : 'none'}`}
    ><Monitor size="16" /></span
  >
</button>
<div class="corner-smooth">
  <div class="smooth"></div>
</div>

<div id="theme-transition-overlay" class="fixed inset-0 pointer-events-none will-change-transform"></div>

<script>
  // Function to update the displayed icon based on the current theme
  function updateIcon(theme) {
    if (moonIcon) moonIcon.style.display = theme === 'dark' ? 'inline-block' : 'none';
    if (sunIcon) sunIcon.style.display = theme === 'light' ? 'inline-block' : 'none';
    if (systemIcon) systemIcon.style.display = theme === 'system' ? 'inline-block' : 'none';
  }

  // Function to toggle through theme options: light → dark → system → light
  function toggleTheme() {
    // Get current theme from cookie or default to system
    const currentTheme =
      document.cookie
        .split(';')
        .find((c) => c.trim().startsWith('theme='))
        ?.split('=')[1] || 'system';

    // Determine next theme in the cycle
    let newTheme;
    if (currentTheme === 'light') newTheme = 'dark';
    else if (currentTheme === 'dark') newTheme = 'system';
    else newTheme = 'light';

    if (!overlay) return;

    // Set initial position of overlay
    overlay.style.transform = 'translateX(-125%)';
    overlay.style.display = 'block';

    // Trigger animation
    setTimeout(() => {
      overlay.style.transform = 'translateX(0) translateY(0)';

      // Apply the new theme
      setTimeout(() => {
        // Apply theme class to HTML element
        if (newTheme === 'dark') {
          document.documentElement.classList.add('dark');
          document.documentElement.classList.remove('system');
        } else if (newTheme === 'light') {
          document.documentElement.classList.remove('dark');
          document.documentElement.classList.remove('system');
        } else {
          // system
          document.documentElement.classList.remove('dark');
          document.documentElement.classList.add('system');
        }

        // Set cookie
        document.cookie = `theme=${newTheme};path=/;max-age=31536000;samesite=lax`;

        // Update icon display
        updateIcon(newTheme);

        // Complete the animation
        setTimeout(() => {
          overlay.style.transform = 'translateX(125%)';

          // Hide overlay when done
          setTimeout(() => {
            overlay.style.display = 'none';
          }, 500);
        }, 50);
      }, 250);
    }, 10);
  }

  // Initialize theme toggle
  function initThemeToggle() {
    const toggleButton = document.getElementById('theme-toggle');
    window.moonIcon = document.getElementById('icon-moon');
    window.sunIcon = document.getElementById('icon-sun');
    window.systemIcon = document.getElementById('icon-system');
    window.overlay = document.getElementById('theme-transition-overlay');

    if (toggleButton) {
      toggleButton.addEventListener('click', toggleTheme);
    }
  }

  initThemeToggle();
  document.addEventListener('astro:page-load', () => {
    initThemeToggle();
  });
</script>

<style>
  #theme-transition-overlay {
    transform: translateX(-125%);
    scale: 1.2;
    transition: transform 600ms ease;
    will-change: transform;
    z-index: 9999;
    background: linear-gradient(to right in lch, #d97173, #627fae, #c872c5);
    background-size: cover;
    filter: blur(30px);
    mix-blend-mode: color-dodge !important;
    opacity: 1;
    display: none;
    mask-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1), rgba(0, 0, 0, 0));
  }
</style>
